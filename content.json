{"meta":{"title":"枫筝","subtitle":"枫筝的博客","description":"","author":"枫筝","url":"https://jacqueline356.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-08-24T03:37:13.630Z","updated":"2021-08-24T03:37:13.630Z","comments":false,"path":"about/index.html","permalink":"https://jacqueline356.github.io/about/index.html","excerpt":"","text":"​ 2021年，我成了一个初入职场的菜鸟，啥也不会，啥也不是，也没啥目标。 ​ 每天就这样活着，混一混，也挺好，希望这样的时间能久一点吧，一条不想 ​ 翻身的咸鱼。 ​ 十分庆幸偶然认识我的偶像谭晶让我大三最艰苦的时光变得没那么难捱，让 ​ 我的心中有光明，这世界也不是一无是处嘛！ ​ 碎碎念也没啥用，还是自己保重吧，加油，打工人。 ​ 下面立一个flag： ​ 2023年之前，去看一次谭晶的现场！勇敢猪猪，不怕困难，给我冲！！！ ​ 附一张谭晶的美照："},{"title":"分类","date":"2021-08-19T06:20:38.366Z","updated":"2021-08-19T06:20:38.366Z","comments":false,"path":"categories/index.html","permalink":"https://jacqueline356.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-08-19T05:55:17.795Z","updated":"2021-08-18T03:55:47.423Z","comments":false,"path":"books/index.html","permalink":"https://jacqueline356.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-08-19T05:55:44.300Z","updated":"2021-08-19T05:55:44.300Z","comments":false,"path":"links/index.html","permalink":"https://jacqueline356.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-08-19T06:37:30.834Z","updated":"2021-08-19T05:56:48.791Z","comments":false,"path":"repository/index.html","permalink":"https://jacqueline356.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-08-19T06:19:45.893Z","updated":"2021-08-19T06:19:45.893Z","comments":false,"path":"tags/index.html","permalink":"https://jacqueline356.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"回文数","slug":"回文数","date":"2021-08-30T01:42:20.000Z","updated":"2021-08-30T02:46:52.762Z","comments":true,"path":"2021/08/30/回文数/","link":"","permalink":"https://jacqueline356.github.io/2021/08/30/%E5%9B%9E%E6%96%87%E6%95%B0/","excerpt":"","text":"题目： 给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。 思路： 首先要将整数转换为字符串 根据索引得出它的倒序结果 还要考虑数据溢出问题 如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。 算法： 首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。 现在，让我们来考虑如何反转后半部分的数字。 对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。 现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？ 由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。 12345678910111213141516171819202122 class Solution &#123; public boolean isPalindrome(int x) &#123; // 特殊情况： // 如上所述，当 x &lt; 0 时，x 不是回文数。 // 同样地，如果数字的最后一位是 0，为了使该数字为回文， // 则其第一位数字也应该是 0 // 只有 0 满足这一属性 if (x &lt; 0 || (x % 10 == 0 &amp;&amp; x != 0)) &#123; return false; &#125; int revertedNumber = 0; while (x &gt; revertedNumber) &#123; revertedNumber = revertedNumber * 10 + x % 10; x /= 10; &#125; // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。 // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber =123， // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。 return x == revertedNumber || x == revertedNumber / 10; &#125;&#125; 复杂度分析 时间复杂度：O(logn)，对于每次迭代，我们会将输入除以 10，因此时间复杂度为 O(logn)。空间复杂度：O(1)。我们只需要常数空间存放若干变量。","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://jacqueline356.github.io/categories/LeetCode/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://jacqueline356.github.io/tags/Java/"}]},{"title":"时间复杂度简析","slug":"时间复杂度简析","date":"2021-08-25T08:29:10.000Z","updated":"2021-08-25T09:06:06.356Z","comments":true,"path":"2021/08/25/时间复杂度简析/","link":"","permalink":"https://jacqueline356.github.io/2021/08/25/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%AE%80%E6%9E%90/","excerpt":"","text":"时间复杂度概念：若存在函数 f（n），使得当n趋近于无穷大时，T（n）/ f（n）的极限值为不等于零的常数，则称 f（n）是T（n）的同数量级函数。 记作T（n）= O（f（n）），称O（f（n））为算法的渐进时间复杂度，简称时间复杂度。渐进时间复杂度用大写O来表示，所以也被称为大O表示法。 简单来说，时间复杂度就是把时间规模函数T(n)简化为一个数量级，这个数量级可以是n, n^2, n^3 等。 导出时间复杂度的原则： 如果运行时间是常数量级，用常数1表示。 只保留时间函数中的最高阶项 如果最高阶项存在，则省去最高阶项前面的系数。 例： 原式 时间复杂度 T（n) = 2 T（n） = O（1） T (n) = 3n T(n) = O(n) T（n） = 5logn T（n） = O（logn） T（n） = 0.5n^2 + 0.5n T（n） = O（n^2） 时间复杂度顺序 O（1）&lt;O（logn）&lt; O（n）&lt; O（n^2）","categories":[{"name":"知识点","slug":"知识点","permalink":"https://jacqueline356.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://jacqueline356.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"两数之和","slug":"两数之和-1","date":"2021-08-25T02:33:12.000Z","updated":"2021-08-25T02:49:23.428Z","comments":true,"path":"2021/08/25/两数之和-1/","link":"","permalink":"https://jacqueline356.github.io/2021/08/25/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-1/","excerpt":"","text":"题目： 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 12345678910111213141516class solution&#123; public int[] twoSum(int[] nums,int targets)&#123; int[] arr = new int[2]; int n = nums.length; for(int i=0;i&lt;n;i++)&#123; for(int j=i+1;j&lt;n;j++)&#123; if(nums[i]+nums[j] == target)&#123; arr[0] = i; arr[1] = j; return arr; &#125; &#125; &#125; return new int[0]; &#125;&#125; 时间复杂度为o(n^2) TA解： 1234567891011121314151617181920212223242526class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; //我们要找到2个数之和等于target //即我们需要找到nums[i] + nums[j] == target，并且返回他们的下标，即i和j，其中i != j int[] ans = new int[2]; //声明一个大小为2的数组用来保存结果 //我们通过循环来遍历所有的数字 int n = nums.length; //用一个变量len保存nums的长度 //i为第一个数的下标，nums一共有n个数，所以i的取值范围是[0, n-1] for(int i = 0; i &lt; n; i++)&#123; //j为第二个数的下标。 for(int j = i + 1; j &lt; n; j++)&#123; //对于每个数nums[i]，我们验证一遍其他数（nums[j]）跟它的和是否等于target //如果满足条件 if(nums[i] + nums[j] == target)&#123; //将下标写入返回值数组里 ans[0] = i; ans[1] = j; //返回 return ans; &#125; &#125; &#125; //默认返回值 return new int[0]; &#125;&#125;","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://jacqueline356.github.io/categories/LeetCode/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://jacqueline356.github.io/tags/Java/"},{"name":"算法","slug":"算法","permalink":"https://jacqueline356.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"测试","slug":"test-1","date":"2021-08-24T01:28:45.000Z","updated":"2021-08-25T02:53:01.700Z","comments":true,"path":"2021/08/24/test-1/","link":"","permalink":"https://jacqueline356.github.io/2021/08/24/test-1/","excerpt":"","text":"一级标题二级标题一级标题二级标题一级标题二级标题这是一张","categories":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/tags/test/"}]},{"title":"嘿","slug":"测试","date":"2021-08-19T03:58:19.155Z","updated":"2021-08-25T02:53:18.077Z","comments":true,"path":"2021/08/19/测试/","link":"","permalink":"https://jacqueline356.github.io/2021/08/19/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"一级标题二级标题一级标题二级标题一级标题二级标题","categories":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/tags/test/"}]},{"title":"helloworld","slug":"hello-world","date":"2021-08-18T03:20:17.067Z","updated":"2021-08-19T05:48:08.568Z","comments":true,"path":"2021/08/18/hello-world/","link":"","permalink":"https://jacqueline356.github.io/2021/08/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/tags/test/"}]}],"categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://jacqueline356.github.io/categories/LeetCode/"},{"name":"知识点","slug":"知识点","permalink":"https://jacqueline356.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/categories/test/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://jacqueline356.github.io/tags/Java/"},{"name":"算法","slug":"算法","permalink":"https://jacqueline356.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"test","slug":"test","permalink":"https://jacqueline356.github.io/tags/test/"}]}